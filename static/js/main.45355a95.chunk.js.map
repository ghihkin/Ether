{"version":3,"sources":["main/components/accountEther.js","main/components/accountEtherToken.js","main/index.js","index.js"],"names":["EtherWeb3","state","etherBalance","web3","Web3","givenProvider","process","eth","getBalance","err","resonse","setState","utils","fromWei","List","ListItem","ListItemText","primary","secondary","this","Divider","component","React","Component","EtherToken","handleChangePage","event","page","handleChangeRowsPerPage","rowsPerPage","target","value","tokenData","axios","get","then","response","status","data","result","map","tokenName","tokenSymbol","blockHash","catch","console","log","columns","id","label","minWidth","align","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","key","style","TableBody","slice","row","hover","role","tabIndex","format","TablePagination","rowsPerPageOptions","count","length","onChangePage","onChangeRowsPerPage","require","config","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45355a95.chunk.js","sourcesContent":["import React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Web3 from \"web3\";\r\n\r\nexport default class EtherWeb3 extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            etherBalance: \"00.00\",\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const url = process.env.REACT_APP_API_URL;\r\n        const address = process.env.REACT_APP_ADDRESS;\r\n        const web3 = new Web3(Web3.givenProvider || url);\r\n        web3.eth.getBalance(address, (err, resonse) => {\r\n            if (!err) {\r\n                this.setState({ etherBalance: web3.utils.fromWei(resonse) });\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemText\r\n                        primary=\"Ether\"\r\n                        secondary={this.state.etherBalance}\r\n                    />\r\n                </ListItem>\r\n                <Divider component=\"li\" />\r\n            </List>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n\r\nexport default class EtherToken extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            tokenData: [],\r\n            rowsPerPage: 10,\r\n            page: 0,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        axios\r\n            .get(\r\n                `https://api.etherscan.io/api?module=account&action=tokentx&address=${process.env.REACT_APP_ADDRESS}&startblock=0&endblock=999999999&sort=asc&apikey=${process.env.REACT_APP_API_TOKEN}`\r\n            )\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    this.setState({\r\n                        tokenData: response.data.result.map((data) => {\r\n                            const {\r\n                                tokenName,\r\n                                tokenSymbol,\r\n                                value,\r\n                                blockHash,\r\n                            } = data;\r\n                            return {\r\n                                tokenName,\r\n                                tokenSymbol,\r\n                                value,\r\n                                blockHash,\r\n                            };\r\n                        }),\r\n                    });\r\n                }\r\n            })\r\n            .catch((err) => console.log(err));\r\n    }\r\n    handleChangePage = (event, page) => {\r\n        this.setState({ page });\r\n    };\r\n\r\n    handleChangeRowsPerPage = (event) => {\r\n        this.setState({ page: 0, rowsPerPage: +event.target.value });\r\n    };\r\n    render() {\r\n        console.log(this.state);\r\n        const { tokenData, rowsPerPage, page } = this.state;\r\n        const columns = [\r\n            { id: \"tokenName\", label: \"Name\", minWidth: 250 },\r\n            {\r\n                id: \"tokenSymbol\",\r\n                label: \"Symbol\",\r\n                minWidth: 150,\r\n                align: \"right\",\r\n            },\r\n            { id: \"value\", label: \"Value\", minWidth: 150, align: \"right\" },\r\n        ];\r\n        return (\r\n            <Paper>\r\n                <TableContainer>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                {columns.map((column) => (\r\n                                    <TableCell\r\n                                        key={column.id}\r\n                                        align={column.align}\r\n                                        style={{ minWidth: column.minWidth }}\r\n                                    >\r\n                                        {column.label}\r\n                                    </TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {tokenData\r\n                                .slice(\r\n                                    page * rowsPerPage,\r\n                                    page * rowsPerPage + rowsPerPage\r\n                                )\r\n                                .map((row) => {\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            role=\"checkbox\"\r\n                                            tabIndex={-1}\r\n                                            key={row.blockHash}\r\n                                        >\r\n                                            {columns.map((column) => {\r\n                                                const value = row[column.id];\r\n                                                return (\r\n                                                    <TableCell\r\n                                                        key={column.id}\r\n                                                        align={column.align}\r\n                                                    >\r\n                                                        {column.format &&\r\n                                                        typeof value ===\r\n                                                            \"number\"\r\n                                                            ? column.format(\r\n                                                                  value\r\n                                                              )\r\n                                                            : value}\r\n                                                    </TableCell>\r\n                                                );\r\n                                            })}\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 25, 100]}\r\n                    component=\"div\"\r\n                    count={tokenData.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={this.handleChangePage}\r\n                    onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport AccountEther from \"./components/accountEther\";\r\nimport AccountEtherToken from \"./components/accountEtherToken\";\r\nimport \"./style.css\";\r\nrequire(\"dotenv\").config();\r\nexport default () => {\r\n    return (\r\n        <Container maxWidth=\"lg\">\r\n            <AccountEther />\r\n            <AccountEtherToken />\r\n        </Container>\r\n    );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./main\";\nReactDOM.render(\n    <React.StrictMode>\n        <Main />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}